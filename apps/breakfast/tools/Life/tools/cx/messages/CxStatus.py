#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'CxStatus'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 67

# The Active Message type associated with this message.
AM_TYPE = 0xD3 

class CxStatus(tinyos.message.Message.Message):
    # Create a new CxStatus of size 67.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=67):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <CxStatus> \n"
        try:
            s += "  [distance=0x%x]\n" % (self.get_distance())
        except:
            pass
        try:
            s += "  [dataPending=0x%x]\n" % (self.get_dataPending())
        except:
            pass
        try:
            s += "  [bw=0x%x]\n" % (self.get_bw())
        except:
            pass
        try:
            s += "  [wakeupRC=0x%x]\n" % (self.get_wakeupRC())
        except:
            pass
        try:
            s += "  [wakeupTS=0x%x]\n" % (self.get_wakeupTS())
        except:
            pass
        try:
            s += "  [pushCookie=0x%x]\n" % (self.get_pushCookie())
        except:
            pass
        try:
            s += "  [writeCookie=0x%x]\n" % (self.get_writeCookie())
        except:
            pass
        try:
            s += "  [missingLength=0x%x]\n" % (self.get_missingLength())
        except:
            pass
        try:
            s += "  [subnetChannel=0x%x]\n" % (self.get_subnetChannel())
        except:
            pass
        try:
            s += "  [sampleInterval=0x%x]\n" % (self.get_sampleInterval())
        except:
            pass
        try:
            s += "  [role=0x%x]\n" % (self.get_role())
        except:
            pass
        try:
            s += "  [barcode=";
            for i in range(0, 8):
                s += "0x%x " % (self.getElement_barcode(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [neighbors=";
            for i in range(0, 16):
                s += "0x%x " % (self.getElement_neighbors(i) & 0xffff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: distance
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'distance' is signed (False).
    #
    def isSigned_distance(self):
        return False
    
    #
    # Return whether the field 'distance' is an array (False).
    #
    def isArray_distance(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'distance'
    #
    def offset_distance(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'distance'
    #
    def offsetBits_distance(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'distance'
    #
    def get_distance(self):
        return self.getUIntElement(self.offsetBits_distance(), 8, 1)
    
    #
    # Set the value of the field 'distance'
    #
    def set_distance(self, value):
        self.setUIntElement(self.offsetBits_distance(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'distance'
    #
    def size_distance(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'distance'
    #
    def sizeBits_distance(self):
        return 8
    
    #
    # Accessor methods for field: dataPending
    #   Field type: short
    #   Offset (bits): 8
    #   Size (bits): 8
    #

    #
    # Return whether the field 'dataPending' is signed (False).
    #
    def isSigned_dataPending(self):
        return False
    
    #
    # Return whether the field 'dataPending' is an array (False).
    #
    def isArray_dataPending(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dataPending'
    #
    def offset_dataPending(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'dataPending'
    #
    def offsetBits_dataPending(self):
        return 8
    
    #
    # Return the value (as a short) of the field 'dataPending'
    #
    def get_dataPending(self):
        return self.getUIntElement(self.offsetBits_dataPending(), 8, 1)
    
    #
    # Set the value of the field 'dataPending'
    #
    def set_dataPending(self, value):
        self.setUIntElement(self.offsetBits_dataPending(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dataPending'
    #
    def size_dataPending(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'dataPending'
    #
    def sizeBits_dataPending(self):
        return 8
    
    #
    # Accessor methods for field: bw
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'bw' is signed (False).
    #
    def isSigned_bw(self):
        return False
    
    #
    # Return whether the field 'bw' is an array (False).
    #
    def isArray_bw(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'bw'
    #
    def offset_bw(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'bw'
    #
    def offsetBits_bw(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'bw'
    #
    def get_bw(self):
        return self.getUIntElement(self.offsetBits_bw(), 8, 1)
    
    #
    # Set the value of the field 'bw'
    #
    def set_bw(self, value):
        self.setUIntElement(self.offsetBits_bw(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'bw'
    #
    def size_bw(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'bw'
    #
    def sizeBits_bw(self):
        return 8
    
    #
    # Accessor methods for field: wakeupRC
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 16
    #

    #
    # Return whether the field 'wakeupRC' is signed (False).
    #
    def isSigned_wakeupRC(self):
        return False
    
    #
    # Return whether the field 'wakeupRC' is an array (False).
    #
    def isArray_wakeupRC(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'wakeupRC'
    #
    def offset_wakeupRC(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'wakeupRC'
    #
    def offsetBits_wakeupRC(self):
        return 24
    
    #
    # Return the value (as a int) of the field 'wakeupRC'
    #
    def get_wakeupRC(self):
        return self.getUIntElement(self.offsetBits_wakeupRC(), 16, 1)
    
    #
    # Set the value of the field 'wakeupRC'
    #
    def set_wakeupRC(self, value):
        self.setUIntElement(self.offsetBits_wakeupRC(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'wakeupRC'
    #
    def size_wakeupRC(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'wakeupRC'
    #
    def sizeBits_wakeupRC(self):
        return 16
    
    #
    # Accessor methods for field: wakeupTS
    #   Field type: long
    #   Offset (bits): 40
    #   Size (bits): 32
    #

    #
    # Return whether the field 'wakeupTS' is signed (False).
    #
    def isSigned_wakeupTS(self):
        return False
    
    #
    # Return whether the field 'wakeupTS' is an array (False).
    #
    def isArray_wakeupTS(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'wakeupTS'
    #
    def offset_wakeupTS(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'wakeupTS'
    #
    def offsetBits_wakeupTS(self):
        return 40
    
    #
    # Return the value (as a long) of the field 'wakeupTS'
    #
    def get_wakeupTS(self):
        return self.getUIntElement(self.offsetBits_wakeupTS(), 32, 1)
    
    #
    # Set the value of the field 'wakeupTS'
    #
    def set_wakeupTS(self, value):
        self.setUIntElement(self.offsetBits_wakeupTS(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'wakeupTS'
    #
    def size_wakeupTS(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'wakeupTS'
    #
    def sizeBits_wakeupTS(self):
        return 32
    
    #
    # Accessor methods for field: pushCookie
    #   Field type: long
    #   Offset (bits): 72
    #   Size (bits): 32
    #

    #
    # Return whether the field 'pushCookie' is signed (False).
    #
    def isSigned_pushCookie(self):
        return False
    
    #
    # Return whether the field 'pushCookie' is an array (False).
    #
    def isArray_pushCookie(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pushCookie'
    #
    def offset_pushCookie(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'pushCookie'
    #
    def offsetBits_pushCookie(self):
        return 72
    
    #
    # Return the value (as a long) of the field 'pushCookie'
    #
    def get_pushCookie(self):
        return self.getUIntElement(self.offsetBits_pushCookie(), 32, 1)
    
    #
    # Set the value of the field 'pushCookie'
    #
    def set_pushCookie(self, value):
        self.setUIntElement(self.offsetBits_pushCookie(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pushCookie'
    #
    def size_pushCookie(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'pushCookie'
    #
    def sizeBits_pushCookie(self):
        return 32
    
    #
    # Accessor methods for field: writeCookie
    #   Field type: long
    #   Offset (bits): 104
    #   Size (bits): 32
    #

    #
    # Return whether the field 'writeCookie' is signed (False).
    #
    def isSigned_writeCookie(self):
        return False
    
    #
    # Return whether the field 'writeCookie' is an array (False).
    #
    def isArray_writeCookie(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'writeCookie'
    #
    def offset_writeCookie(self):
        return (104 / 8)
    
    #
    # Return the offset (in bits) of the field 'writeCookie'
    #
    def offsetBits_writeCookie(self):
        return 104
    
    #
    # Return the value (as a long) of the field 'writeCookie'
    #
    def get_writeCookie(self):
        return self.getUIntElement(self.offsetBits_writeCookie(), 32, 1)
    
    #
    # Set the value of the field 'writeCookie'
    #
    def set_writeCookie(self, value):
        self.setUIntElement(self.offsetBits_writeCookie(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'writeCookie'
    #
    def size_writeCookie(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'writeCookie'
    #
    def sizeBits_writeCookie(self):
        return 32
    
    #
    # Accessor methods for field: missingLength
    #   Field type: long
    #   Offset (bits): 136
    #   Size (bits): 32
    #

    #
    # Return whether the field 'missingLength' is signed (False).
    #
    def isSigned_missingLength(self):
        return False
    
    #
    # Return whether the field 'missingLength' is an array (False).
    #
    def isArray_missingLength(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'missingLength'
    #
    def offset_missingLength(self):
        return (136 / 8)
    
    #
    # Return the offset (in bits) of the field 'missingLength'
    #
    def offsetBits_missingLength(self):
        return 136
    
    #
    # Return the value (as a long) of the field 'missingLength'
    #
    def get_missingLength(self):
        return self.getUIntElement(self.offsetBits_missingLength(), 32, 1)
    
    #
    # Set the value of the field 'missingLength'
    #
    def set_missingLength(self, value):
        self.setUIntElement(self.offsetBits_missingLength(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'missingLength'
    #
    def size_missingLength(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'missingLength'
    #
    def sizeBits_missingLength(self):
        return 32
    
    #
    # Accessor methods for field: subnetChannel
    #   Field type: short
    #   Offset (bits): 168
    #   Size (bits): 8
    #

    #
    # Return whether the field 'subnetChannel' is signed (False).
    #
    def isSigned_subnetChannel(self):
        return False
    
    #
    # Return whether the field 'subnetChannel' is an array (False).
    #
    def isArray_subnetChannel(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'subnetChannel'
    #
    def offset_subnetChannel(self):
        return (168 / 8)
    
    #
    # Return the offset (in bits) of the field 'subnetChannel'
    #
    def offsetBits_subnetChannel(self):
        return 168
    
    #
    # Return the value (as a short) of the field 'subnetChannel'
    #
    def get_subnetChannel(self):
        return self.getUIntElement(self.offsetBits_subnetChannel(), 8, 1)
    
    #
    # Set the value of the field 'subnetChannel'
    #
    def set_subnetChannel(self, value):
        self.setUIntElement(self.offsetBits_subnetChannel(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'subnetChannel'
    #
    def size_subnetChannel(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'subnetChannel'
    #
    def sizeBits_subnetChannel(self):
        return 8
    
    #
    # Accessor methods for field: sampleInterval
    #   Field type: long
    #   Offset (bits): 176
    #   Size (bits): 32
    #

    #
    # Return whether the field 'sampleInterval' is signed (False).
    #
    def isSigned_sampleInterval(self):
        return False
    
    #
    # Return whether the field 'sampleInterval' is an array (False).
    #
    def isArray_sampleInterval(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sampleInterval'
    #
    def offset_sampleInterval(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'sampleInterval'
    #
    def offsetBits_sampleInterval(self):
        return 176
    
    #
    # Return the value (as a long) of the field 'sampleInterval'
    #
    def get_sampleInterval(self):
        return self.getUIntElement(self.offsetBits_sampleInterval(), 32, 1)
    
    #
    # Set the value of the field 'sampleInterval'
    #
    def set_sampleInterval(self, value):
        self.setUIntElement(self.offsetBits_sampleInterval(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sampleInterval'
    #
    def size_sampleInterval(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'sampleInterval'
    #
    def sizeBits_sampleInterval(self):
        return 32
    
    #
    # Accessor methods for field: role
    #   Field type: short
    #   Offset (bits): 208
    #   Size (bits): 8
    #

    #
    # Return whether the field 'role' is signed (False).
    #
    def isSigned_role(self):
        return False
    
    #
    # Return whether the field 'role' is an array (False).
    #
    def isArray_role(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'role'
    #
    def offset_role(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'role'
    #
    def offsetBits_role(self):
        return 208
    
    #
    # Return the value (as a short) of the field 'role'
    #
    def get_role(self):
        return self.getUIntElement(self.offsetBits_role(), 8, 1)
    
    #
    # Set the value of the field 'role'
    #
    def set_role(self, value):
        self.setUIntElement(self.offsetBits_role(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'role'
    #
    def size_role(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'role'
    #
    def sizeBits_role(self):
        return 8
    
    #
    # Accessor methods for field: barcode
    #   Field type: short[]
    #   Offset (bits): 216
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'barcode' is signed (False).
    #
    def isSigned_barcode(self):
        return False
    
    #
    # Return whether the field 'barcode' is an array (True).
    #
    def isArray_barcode(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'barcode'
    #
    def offset_barcode(self, index1):
        offset = 216
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'barcode'
    #
    def offsetBits_barcode(self, index1):
        offset = 216
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'barcode' as a short[]
    #
    def get_barcode(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_barcode(0)):
                tmp[index0] = self.getElement_barcode(index0)
        return tmp
    
    #
    # Set the contents of the array 'barcode' from the given short[]
    #
    def set_barcode(self, value):
        for index0 in range(0, len(value)):
            self.setElement_barcode(index0, value[index0])

    #
    # Return an element (as a short) of the array 'barcode'
    #
    def getElement_barcode(self, index1):
        return self.getUIntElement(self.offsetBits_barcode(index1), 8, 1)
    
    #
    # Set an element of the array 'barcode'
    #
    def setElement_barcode(self, index1, value):
        self.setUIntElement(self.offsetBits_barcode(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'barcode'
    #
    def totalSize_barcode(self):
        return (64 / 8)
    
    #
    # Return the total size, in bits, of the array 'barcode'
    #
    def totalSizeBits_barcode(self):
        return 64
    
    #
    # Return the size, in bytes, of each element of the array 'barcode'
    #
    def elementSize_barcode(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'barcode'
    #
    def elementSizeBits_barcode(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'barcode'
    #
    def numDimensions_barcode(self):
        return 1
    
    #
    # Return the number of elements in the array 'barcode'
    #
    def numElements_barcode():
        return 8
    
    #
    # Return the number of elements in the array 'barcode'
    # for the given dimension.
    #
    def numElements_barcode(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'barcode' with a String
    #
    def setString_barcode(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_barcode(i, ord(s[i]));
         self.setElement_barcode(l, 0) #null terminate
    
    #
    # Read the array 'barcode' as a String
    #
    def getString_barcode(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_barcode(i) == chr(0):
                break
            carr += self.getElement_barcode(i)
        return carr
    
    #
    # Accessor methods for field: neighbors
    #   Field type: int[]
    #   Offset (bits): 280
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'neighbors' is signed (False).
    #
    def isSigned_neighbors(self):
        return False
    
    #
    # Return whether the field 'neighbors' is an array (True).
    #
    def isArray_neighbors(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'neighbors'
    #
    def offset_neighbors(self, index1):
        offset = 280
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'neighbors'
    #
    def offsetBits_neighbors(self, index1):
        offset = 280
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'neighbors' as a int[]
    #
    def get_neighbors(self):
        tmp = [None]*16
        for index0 in range (0, self.numElements_neighbors(0)):
                tmp[index0] = self.getElement_neighbors(index0)
        return tmp
    
    #
    # Set the contents of the array 'neighbors' from the given int[]
    #
    def set_neighbors(self, value):
        for index0 in range(0, len(value)):
            self.setElement_neighbors(index0, value[index0])

    #
    # Return an element (as a int) of the array 'neighbors'
    #
    def getElement_neighbors(self, index1):
        return self.getUIntElement(self.offsetBits_neighbors(index1), 16, 1)
    
    #
    # Set an element of the array 'neighbors'
    #
    def setElement_neighbors(self, index1, value):
        self.setUIntElement(self.offsetBits_neighbors(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'neighbors'
    #
    def totalSize_neighbors(self):
        return (256 / 8)
    
    #
    # Return the total size, in bits, of the array 'neighbors'
    #
    def totalSizeBits_neighbors(self):
        return 256
    
    #
    # Return the size, in bytes, of each element of the array 'neighbors'
    #
    def elementSize_neighbors(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'neighbors'
    #
    def elementSizeBits_neighbors(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'neighbors'
    #
    def numDimensions_neighbors(self):
        return 1
    
    #
    # Return the number of elements in the array 'neighbors'
    #
    def numElements_neighbors():
        return 16
    
    #
    # Return the number of elements in the array 'neighbors'
    # for the given dimension.
    #
    def numElements_neighbors(self, dimension):
        array_dims = [ 16,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    

#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'PongMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 14

# The Active Message type associated with this message.
AM_TYPE = 249

class PongMsg(tinyos.message.Message.Message):
    # Create a new PongMsg of size 14.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=14):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <PongMsg> \n"
        try:
            s += "  [pingId=0x%x]\n" % (self.get_pingId())
        except:
            pass
        try:
            s += "  [rebootCounter=0x%x]\n" % (self.get_rebootCounter())
        except:
            pass
        try:
            s += "  [tsMilli=0x%x]\n" % (self.get_tsMilli())
        except:
            pass
        try:
            s += "  [ts32k=0x%x]\n" % (self.get_ts32k())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: pingId
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'pingId' is signed (False).
    #
    def isSigned_pingId(self):
        return False
    
    #
    # Return whether the field 'pingId' is an array (False).
    #
    def isArray_pingId(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pingId'
    #
    def offset_pingId(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'pingId'
    #
    def offsetBits_pingId(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'pingId'
    #
    def get_pingId(self):
        return self.getUIntElement(self.offsetBits_pingId(), 32, 1)
    
    #
    # Set the value of the field 'pingId'
    #
    def set_pingId(self, value):
        self.setUIntElement(self.offsetBits_pingId(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pingId'
    #
    def size_pingId(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'pingId'
    #
    def sizeBits_pingId(self):
        return 32
    
    #
    # Accessor methods for field: rebootCounter
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'rebootCounter' is signed (False).
    #
    def isSigned_rebootCounter(self):
        return False
    
    #
    # Return whether the field 'rebootCounter' is an array (False).
    #
    def isArray_rebootCounter(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'rebootCounter'
    #
    def offset_rebootCounter(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'rebootCounter'
    #
    def offsetBits_rebootCounter(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'rebootCounter'
    #
    def get_rebootCounter(self):
        return self.getUIntElement(self.offsetBits_rebootCounter(), 16, 1)
    
    #
    # Set the value of the field 'rebootCounter'
    #
    def set_rebootCounter(self, value):
        self.setUIntElement(self.offsetBits_rebootCounter(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'rebootCounter'
    #
    def size_rebootCounter(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'rebootCounter'
    #
    def sizeBits_rebootCounter(self):
        return 16
    
    #
    # Accessor methods for field: tsMilli
    #   Field type: long
    #   Offset (bits): 48
    #   Size (bits): 32
    #

    #
    # Return whether the field 'tsMilli' is signed (False).
    #
    def isSigned_tsMilli(self):
        return False
    
    #
    # Return whether the field 'tsMilli' is an array (False).
    #
    def isArray_tsMilli(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tsMilli'
    #
    def offset_tsMilli(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'tsMilli'
    #
    def offsetBits_tsMilli(self):
        return 48
    
    #
    # Return the value (as a long) of the field 'tsMilli'
    #
    def get_tsMilli(self):
        return self.getUIntElement(self.offsetBits_tsMilli(), 32, 1)
    
    #
    # Set the value of the field 'tsMilli'
    #
    def set_tsMilli(self, value):
        self.setUIntElement(self.offsetBits_tsMilli(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'tsMilli'
    #
    def size_tsMilli(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'tsMilli'
    #
    def sizeBits_tsMilli(self):
        return 32
    
    #
    # Accessor methods for field: ts32k
    #   Field type: long
    #   Offset (bits): 80
    #   Size (bits): 32
    #

    #
    # Return whether the field 'ts32k' is signed (False).
    #
    def isSigned_ts32k(self):
        return False
    
    #
    # Return whether the field 'ts32k' is an array (False).
    #
    def isArray_ts32k(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ts32k'
    #
    def offset_ts32k(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'ts32k'
    #
    def offsetBits_ts32k(self):
        return 80
    
    #
    # Return the value (as a long) of the field 'ts32k'
    #
    def get_ts32k(self):
        return self.getUIntElement(self.offsetBits_ts32k(), 32, 1)
    
    #
    # Set the value of the field 'ts32k'
    #
    def set_ts32k(self, value):
        self.setUIntElement(self.offsetBits_ts32k(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ts32k'
    #
    def size_ts32k(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'ts32k'
    #
    def sizeBits_ts32k(self):
        return 32
    

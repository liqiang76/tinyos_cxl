#!/usr/bin/env python
import sys
import re

boilerplate0 ="""
<html>
  <head>
    <script type="text/javascript" >

/*

CollapsibleLists.js

An object allowing lists to dynamically expand and collapse

Created by Stephen Morley - http://code.stephenmorley.org/ - and released under
the terms of the CC0 1.0 Universal legal code:

http://creativecommons.org/publicdomain/zero/1.0/legalcode

*/

// create the CollapsibleLists object
var CollapsibleLists =
    new function(){

      /* Makes all lists with the class 'collapsibleList' collapsible. The
       * parameter is:
       *
       * doNotRecurse - true if sub-lists should not be made collapsible
       */
      this.apply = function(doNotRecurse){

        // loop over the unordered lists
        var uls = document.getElementsByTagName('ul');
        for (var index = 0; index < uls.length; index ++){

          // check whether this list should be made collapsible
          if (uls[index].className.match(/(^| )collapsibleList( |$)/)){

            // make this list collapsible
            this.applyTo(uls[index], true);

            // check whether sub-lists should also be made collapsible
            if (!doNotRecurse){

              // add the collapsibleList class to the sub-lists
              var subUls = uls[index].getElementsByTagName('ul');
              for (var subIndex = 0; subIndex < subUls.length; subIndex ++){
                subUls[subIndex].className += ' collapsibleList';
              }

            }

          }

        }

      };

      /* Makes the specified list collapsible. The parameters are:
       *
       * node         - the list element
       * doNotRecurse - true if sub-lists should not be made collapsible
       */
      this.applyTo = function(node, doNotRecurse){

        // loop over the list items within this node
        var lis = node.getElementsByTagName('li');
        for (var index = 0; index < lis.length; index ++){

          // check whether this list item should be collapsible
          if (!doNotRecurse || node == lis[index].parentNode){

            // prevent text from being selected unintentionally
            if (lis[index].addEventListener){
              lis[index].addEventListener(
                  'mousedown', function (e){ e.preventDefault(); }, false);
            }else{
              lis[index].attachEvent(
                  'onselectstart', function(){ event.returnValue = false; });
            }

            // add the click listener
            if (lis[index].addEventListener){
              lis[index].addEventListener(
                  'click', createClickListener(lis[index]), false);
            }else{
              lis[index].attachEvent(
                  'onclick', createClickListener(lis[index]));
            }

            // close the unordered lists within this list item
            toggle(lis[index]);

          }

        }

      };

      /* Returns a function that toggles the display status of any unordered
       * list elements within the specified node. The parameter is:
       *
       * node - the node containing the unordered list elements
       */
      function createClickListener(node){

        // return the function
        return function(e){

          // ensure the event object is defined
          if (!e) e = window.event;

          // find the list item containing the target of the event
          var li = (e.target ? e.target : e.srcElement);
          while (li.nodeName != 'LI') li = li.parentNode;

          // toggle the state of the node if it was the target of the event
          if (li == node) toggle(node);

        };

      }

      /* Opens or closes the unordered list elements directly within the
       * specified node. The parameter is:
       *
       * node - the node containing the unordered list elements
       */
      function toggle(node){

        // determine whether to open or close the unordered lists
        var open = node.className.match(/(^| )collapsibleListClosed( |$)/);

        // loop over the unordered list elements with the node
        var uls = node.getElementsByTagName('ul');
        for (var index = 0; index < uls.length; index ++){

          // find the parent list item of this unordered list
          var li = uls[index];
          while (li.nodeName != 'LI') li = li.parentNode;

          // style the unordered list if it is directly within this node
          if (li == node) uls[index].style.display = (open ? 'block' : 'none');

        }

        // remove the current class from the node
        node.className =
            node.className.replace(
                /(^| )collapsibleList(Open|Closed)( |$)/, '');

        // if the node contains unordered lists, set its class
        if (uls.length > 0){
          node.className += ' collapsibleList' + (open ? 'Open' : 'Closed');
        }

      }

    }();
    </script>
    <style>
      .collapsibleList li{
        list-style-type:square;
        cursor:auto;
      }
      
      li.collapsibleListOpen{
        list-style-type:circle;
        cursor:pointer;
      }
      
      li.collapsibleListClosed{
        list-style-type:disc;
        cursor:pointer;
      }
    </style>
  </head>
  <body onload="CollapsibleLists.apply()">
"""
boilerplate1 ="""</body></html>"""

class Node(object):
    def __init__(self, name, depth):
        self.children = {}
        self.name = name
        self.size = 0
        self.depth = depth

    def addLeaf(self, identifier, size):
        if len(identifier) > 1:
            if identifier[0] not in self.children:
                self.children[identifier[0]] = Node(identifier[0], 1 + self.depth)
            return self.children[identifier[0]].addLeaf(identifier[1:], size)
        elif identifier:
            self.children[identifier[0]] = Node(identifier[0], 1+self.depth)
            self.children[identifier[0]].size = size
            return self.children[identifier[0]]
        else:
            print "unidentified add leaf"

    def grandTotal(self):
        return self.size + sum(self.children[k].grandTotal()[0] for k in
          self.children), self.name

    def __str__(self):
        ret = "%u %s\n"%self.grandTotal()
        if self.children:
            ret += "\t"*self.depth + "<ul class='collapsibleList'>\n"
            for (gt, n) in sorted([self.children[n].grandTotal() for n in self.children], reverse= True):
                ret += "\t"*(self.depth+1) + "<li>%s"% self.children[n]
                ret += "\t"*(self.depth+1) + "</li>\n"
            ret += "\t"*self.depth+"</ul>\n"
        return ret 
        
def parseSection(f, root):
    line = f.readline()
    while len(line.split()):
        r=line.strip().split()
        size = int(r[0])
        name = r[1].split('__')
        root.addLeaf(name, size)
        line = f.readline()
    return root

def toTree(f, label):
    root = Node(label, 0)
    
    line = f.readline()
    while not re.match('.* bytes of Program ROM allocated', line):
        line = f.readline()
    rom = root.addLeaf(["ROM"], 0)

    while not re.match('usage by module:', line):
        line = f.readline()
    parseSection(f, rom)
    
    while not re.match('.* bytes of Constants RAM allocated', line):
        line = f.readline()
    cram = root.addLeaf(["CRAM"], 0)
    while not re.match('usage by module:', line):
        line = f.readline()
    parseSection(f, cram)

    while not re.match('.* bytes of Heap RAM allocated', line):
        line = f.readline()
    ram = root.addLeaf(["RAM"], 0)
    while not re.match('usage by module:', line):
        line = f.readline()
    parseSection(f, ram)

    return root


if __name__ == '__main__':
    f = sys.stdin
    label = '(total)'
    if len(sys.argv) > 1:
        f = open(sys.argv[1])
        label = sys.argv[1]

    root = toTree(f, label)
    print boilerplate0 + str(root) + boilerplate1
